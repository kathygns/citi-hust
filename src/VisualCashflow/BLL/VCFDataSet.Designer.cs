//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BLL {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("VCFDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class VCFDataSet : System.Data.DataSet {
        
        private CityDataTable tableCity;
        
        private DistributionDataTable tableDistribution;
        
        private DonationDataTable tableDonation;
        
        private UserRelationShipDataTable tableUserRelationShip;
        
        private UserDataTable tableUser;
        
        private ProjectDataTable tableProject;
        
        private V_FormatedUserDataTable tableV_FormatedUser;
        
        private System.Data.DataRelation relationFK_User_User;
        
        private System.Data.DataRelation relationFK_Distribution_User;
        
        private System.Data.DataRelation relationFK_Distribution_User1;
        
        private System.Data.DataRelation relationFK_Donation_User;
        
        private System.Data.DataRelation relationFK_UserRelationShip_User;
        
        private System.Data.DataRelation relationFK_UserRelationShip_User1;
        
        private System.Data.DataRelation relationFK_Distribution_Project;
        
        private System.Data.DataRelation relationFK_Donation_Project;
        
        private System.Data.DataRelation relationFK_Project_Project;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VCFDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected VCFDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["City"] != null)) {
                    base.Tables.Add(new CityDataTable(ds.Tables["City"]));
                }
                if ((ds.Tables["Distribution"] != null)) {
                    base.Tables.Add(new DistributionDataTable(ds.Tables["Distribution"]));
                }
                if ((ds.Tables["Donation"] != null)) {
                    base.Tables.Add(new DonationDataTable(ds.Tables["Donation"]));
                }
                if ((ds.Tables["UserRelationShip"] != null)) {
                    base.Tables.Add(new UserRelationShipDataTable(ds.Tables["UserRelationShip"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Project"] != null)) {
                    base.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                if ((ds.Tables["V_FormatedUser"] != null)) {
                    base.Tables.Add(new V_FormatedUserDataTable(ds.Tables["V_FormatedUser"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CityDataTable City {
            get {
                return this.tableCity;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DistributionDataTable Distribution {
            get {
                return this.tableDistribution;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DonationDataTable Donation {
            get {
                return this.tableDonation;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserRelationShipDataTable UserRelationShip {
            get {
                return this.tableUserRelationShip;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectDataTable Project {
            get {
                return this.tableProject;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public V_FormatedUserDataTable V_FormatedUser {
            get {
                return this.tableV_FormatedUser;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            VCFDataSet cln = ((VCFDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["City"] != null)) {
                    base.Tables.Add(new CityDataTable(ds.Tables["City"]));
                }
                if ((ds.Tables["Distribution"] != null)) {
                    base.Tables.Add(new DistributionDataTable(ds.Tables["Distribution"]));
                }
                if ((ds.Tables["Donation"] != null)) {
                    base.Tables.Add(new DonationDataTable(ds.Tables["Donation"]));
                }
                if ((ds.Tables["UserRelationShip"] != null)) {
                    base.Tables.Add(new UserRelationShipDataTable(ds.Tables["UserRelationShip"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Project"] != null)) {
                    base.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                if ((ds.Tables["V_FormatedUser"] != null)) {
                    base.Tables.Add(new V_FormatedUserDataTable(ds.Tables["V_FormatedUser"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableCity = ((CityDataTable)(base.Tables["City"]));
            if ((initTable == true)) {
                if ((this.tableCity != null)) {
                    this.tableCity.InitVars();
                }
            }
            this.tableDistribution = ((DistributionDataTable)(base.Tables["Distribution"]));
            if ((initTable == true)) {
                if ((this.tableDistribution != null)) {
                    this.tableDistribution.InitVars();
                }
            }
            this.tableDonation = ((DonationDataTable)(base.Tables["Donation"]));
            if ((initTable == true)) {
                if ((this.tableDonation != null)) {
                    this.tableDonation.InitVars();
                }
            }
            this.tableUserRelationShip = ((UserRelationShipDataTable)(base.Tables["UserRelationShip"]));
            if ((initTable == true)) {
                if ((this.tableUserRelationShip != null)) {
                    this.tableUserRelationShip.InitVars();
                }
            }
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
            this.tableProject = ((ProjectDataTable)(base.Tables["Project"]));
            if ((initTable == true)) {
                if ((this.tableProject != null)) {
                    this.tableProject.InitVars();
                }
            }
            this.tableV_FormatedUser = ((V_FormatedUserDataTable)(base.Tables["V_FormatedUser"]));
            if ((initTable == true)) {
                if ((this.tableV_FormatedUser != null)) {
                    this.tableV_FormatedUser.InitVars();
                }
            }
            this.relationFK_User_User = this.Relations["FK_User_User"];
            this.relationFK_Distribution_User = this.Relations["FK_Distribution_User"];
            this.relationFK_Distribution_User1 = this.Relations["FK_Distribution_User1"];
            this.relationFK_Donation_User = this.Relations["FK_Donation_User"];
            this.relationFK_UserRelationShip_User = this.Relations["FK_UserRelationShip_User"];
            this.relationFK_UserRelationShip_User1 = this.Relations["FK_UserRelationShip_User1"];
            this.relationFK_Distribution_Project = this.Relations["FK_Distribution_Project"];
            this.relationFK_Donation_Project = this.Relations["FK_Donation_Project"];
            this.relationFK_Project_Project = this.Relations["FK_Project_Project"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "VCFDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/VCFDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableCity = new CityDataTable();
            base.Tables.Add(this.tableCity);
            this.tableDistribution = new DistributionDataTable();
            base.Tables.Add(this.tableDistribution);
            this.tableDonation = new DonationDataTable();
            base.Tables.Add(this.tableDonation);
            this.tableUserRelationShip = new UserRelationShipDataTable();
            base.Tables.Add(this.tableUserRelationShip);
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
            this.tableProject = new ProjectDataTable();
            base.Tables.Add(this.tableProject);
            this.tableV_FormatedUser = new V_FormatedUserDataTable();
            base.Tables.Add(this.tableV_FormatedUser);
            this.relationFK_User_User = new System.Data.DataRelation("FK_User_User", new System.Data.DataColumn[] {
                        this.tableUser.UserIDColumn}, new System.Data.DataColumn[] {
                        this.tableUser.FatherUserIDColumn}, false);
            this.Relations.Add(this.relationFK_User_User);
            this.relationFK_Distribution_User = new System.Data.DataRelation("FK_Distribution_User", new System.Data.DataColumn[] {
                        this.tableUser.UserIDColumn}, new System.Data.DataColumn[] {
                        this.tableDistribution.FromUserIDColumn}, false);
            this.Relations.Add(this.relationFK_Distribution_User);
            this.relationFK_Distribution_User1 = new System.Data.DataRelation("FK_Distribution_User1", new System.Data.DataColumn[] {
                        this.tableUser.UserIDColumn}, new System.Data.DataColumn[] {
                        this.tableDistribution.ToUserIDColumn}, false);
            this.Relations.Add(this.relationFK_Distribution_User1);
            this.relationFK_Donation_User = new System.Data.DataRelation("FK_Donation_User", new System.Data.DataColumn[] {
                        this.tableUser.UserIDColumn}, new System.Data.DataColumn[] {
                        this.tableDonation.DonationUserIDColumn}, false);
            this.Relations.Add(this.relationFK_Donation_User);
            this.relationFK_UserRelationShip_User = new System.Data.DataRelation("FK_UserRelationShip_User", new System.Data.DataColumn[] {
                        this.tableUser.UserIDColumn}, new System.Data.DataColumn[] {
                        this.tableUserRelationShip.SuperiorUserIDColumn}, false);
            this.Relations.Add(this.relationFK_UserRelationShip_User);
            this.relationFK_UserRelationShip_User1 = new System.Data.DataRelation("FK_UserRelationShip_User1", new System.Data.DataColumn[] {
                        this.tableUser.UserIDColumn}, new System.Data.DataColumn[] {
                        this.tableUserRelationShip.InferiorUserIDColumn}, false);
            this.Relations.Add(this.relationFK_UserRelationShip_User1);
            this.relationFK_Distribution_Project = new System.Data.DataRelation("FK_Distribution_Project", new System.Data.DataColumn[] {
                        this.tableProject.ProjectIDColumn}, new System.Data.DataColumn[] {
                        this.tableDistribution.ProjectIDColumn}, false);
            this.Relations.Add(this.relationFK_Distribution_Project);
            this.relationFK_Donation_Project = new System.Data.DataRelation("FK_Donation_Project", new System.Data.DataColumn[] {
                        this.tableProject.ProjectIDColumn}, new System.Data.DataColumn[] {
                        this.tableDonation.ProjectIDColumn}, false);
            this.Relations.Add(this.relationFK_Donation_Project);
            this.relationFK_Project_Project = new System.Data.DataRelation("FK_Project_Project", new System.Data.DataColumn[] {
                        this.tableUser.UserIDColumn}, new System.Data.DataColumn[] {
                        this.tableProject.ManagerIDColumn}, false);
            this.Relations.Add(this.relationFK_Project_Project);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCity() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDistribution() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDonation() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserRelationShip() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProject() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeV_FormatedUser() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            VCFDataSet ds = new VCFDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void CityRowChangeEventHandler(object sender, CityRowChangeEvent e);
        
        public delegate void DistributionRowChangeEventHandler(object sender, DistributionRowChangeEvent e);
        
        public delegate void DonationRowChangeEventHandler(object sender, DonationRowChangeEvent e);
        
        public delegate void UserRelationShipRowChangeEventHandler(object sender, UserRelationShipRowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void ProjectRowChangeEventHandler(object sender, ProjectRowChangeEvent e);
        
        public delegate void V_FormatedUserRowChangeEventHandler(object sender, V_FormatedUserRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCityID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnProvience;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityDataTable() {
                this.TableName = "City";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CityIDColumn {
                get {
                    return this.columnCityID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProvienceColumn {
                get {
                    return this.columnProvience;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow this[int index] {
                get {
                    return ((CityRow)(this.Rows[index]));
                }
            }
            
            public event CityRowChangeEventHandler CityRowChanging;
            
            public event CityRowChangeEventHandler CityRowChanged;
            
            public event CityRowChangeEventHandler CityRowDeleting;
            
            public event CityRowChangeEventHandler CityRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCityRow(CityRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow AddCityRow(int CityID, string Name, string Provience) {
                CityRow rowCityRow = ((CityRow)(this.NewRow()));
                rowCityRow.ItemArray = new object[] {
                        CityID,
                        Name,
                        Provience};
                this.Rows.Add(rowCityRow);
                return rowCityRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow FindByCityID(int CityID) {
                return ((CityRow)(this.Rows.Find(new object[] {
                            CityID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CityDataTable cln = ((CityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CityDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCityID = base.Columns["CityID"];
                this.columnName = base.Columns["Name"];
                this.columnProvience = base.Columns["Provience"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCityID = new System.Data.DataColumn("CityID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnProvience = new System.Data.DataColumn("Provience", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProvience);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCityID}, true));
                this.columnCityID.AllowDBNull = false;
                this.columnCityID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 20;
                this.columnProvience.AllowDBNull = false;
                this.columnProvience.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow NewCityRow() {
                return ((CityRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CityRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CityRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CityRowChanged != null)) {
                    this.CityRowChanged(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CityRowChanging != null)) {
                    this.CityRowChanging(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CityRowDeleted != null)) {
                    this.CityRowDeleted(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CityRowDeleting != null)) {
                    this.CityRowDeleting(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCityRow(CityRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                VCFDataSet ds = new VCFDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DistributionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDistributionID;
            
            private System.Data.DataColumn columnFromUserID;
            
            private System.Data.DataColumn columnToUserID;
            
            private System.Data.DataColumn columnDistributionType;
            
            private System.Data.DataColumn columnPurpose;
            
            private System.Data.DataColumn columnProjectID;
            
            private System.Data.DataColumn columnDistributionDate;
            
            private System.Data.DataColumn columnMoney;
            
            private System.Data.DataColumn columnFeecbackStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionDataTable() {
                this.TableName = "Distribution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistributionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DistributionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DistributionIDColumn {
                get {
                    return this.columnDistributionID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FromUserIDColumn {
                get {
                    return this.columnFromUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ToUserIDColumn {
                get {
                    return this.columnToUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DistributionTypeColumn {
                get {
                    return this.columnDistributionType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PurposeColumn {
                get {
                    return this.columnPurpose;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DistributionDateColumn {
                get {
                    return this.columnDistributionDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MoneyColumn {
                get {
                    return this.columnMoney;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeecbackStatusColumn {
                get {
                    return this.columnFeecbackStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionRow this[int index] {
                get {
                    return ((DistributionRow)(this.Rows[index]));
                }
            }
            
            public event DistributionRowChangeEventHandler DistributionRowChanging;
            
            public event DistributionRowChangeEventHandler DistributionRowChanged;
            
            public event DistributionRowChangeEventHandler DistributionRowDeleting;
            
            public event DistributionRowChangeEventHandler DistributionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDistributionRow(DistributionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionRow AddDistributionRow(UserRow parentUserRowByFK_Distribution_User, UserRow parentUserRowByFK_Distribution_User1, byte DistributionType, string Purpose, ProjectRow parentProjectRowByFK_Distribution_Project, System.DateTime DistributionDate, decimal Money, byte FeecbackStatus) {
                DistributionRow rowDistributionRow = ((DistributionRow)(this.NewRow()));
                rowDistributionRow.ItemArray = new object[] {
                        null,
                        parentUserRowByFK_Distribution_User[0],
                        parentUserRowByFK_Distribution_User1[0],
                        DistributionType,
                        Purpose,
                        parentProjectRowByFK_Distribution_Project[0],
                        DistributionDate,
                        Money,
                        FeecbackStatus};
                this.Rows.Add(rowDistributionRow);
                return rowDistributionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionRow FindByDistributionID(int DistributionID) {
                return ((DistributionRow)(this.Rows.Find(new object[] {
                            DistributionID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DistributionDataTable cln = ((DistributionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DistributionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDistributionID = base.Columns["DistributionID"];
                this.columnFromUserID = base.Columns["FromUserID"];
                this.columnToUserID = base.Columns["ToUserID"];
                this.columnDistributionType = base.Columns["DistributionType"];
                this.columnPurpose = base.Columns["Purpose"];
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnDistributionDate = base.Columns["DistributionDate"];
                this.columnMoney = base.Columns["Money"];
                this.columnFeecbackStatus = base.Columns["FeecbackStatus"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDistributionID = new System.Data.DataColumn("DistributionID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributionID);
                this.columnFromUserID = new System.Data.DataColumn("FromUserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFromUserID);
                this.columnToUserID = new System.Data.DataColumn("ToUserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnToUserID);
                this.columnDistributionType = new System.Data.DataColumn("DistributionType", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributionType);
                this.columnPurpose = new System.Data.DataColumn("Purpose", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurpose);
                this.columnProjectID = new System.Data.DataColumn("ProjectID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnDistributionDate = new System.Data.DataColumn("DistributionDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDistributionDate);
                this.columnMoney = new System.Data.DataColumn("Money", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoney);
                this.columnFeecbackStatus = new System.Data.DataColumn("FeecbackStatus", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeecbackStatus);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDistributionID}, true));
                this.columnDistributionID.AutoIncrement = true;
                this.columnDistributionID.AllowDBNull = false;
                this.columnDistributionID.ReadOnly = true;
                this.columnDistributionID.Unique = true;
                this.columnFromUserID.AllowDBNull = false;
                this.columnToUserID.AllowDBNull = false;
                this.columnDistributionType.AllowDBNull = false;
                this.columnPurpose.AllowDBNull = false;
                this.columnPurpose.MaxLength = 2147483647;
                this.columnProjectID.AllowDBNull = false;
                this.columnDistributionDate.AllowDBNull = false;
                this.columnMoney.AllowDBNull = false;
                this.columnFeecbackStatus.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionRow NewDistributionRow() {
                return ((DistributionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DistributionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DistributionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DistributionRowChanged != null)) {
                    this.DistributionRowChanged(this, new DistributionRowChangeEvent(((DistributionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DistributionRowChanging != null)) {
                    this.DistributionRowChanging(this, new DistributionRowChangeEvent(((DistributionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DistributionRowDeleted != null)) {
                    this.DistributionRowDeleted(this, new DistributionRowChangeEvent(((DistributionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DistributionRowDeleting != null)) {
                    this.DistributionRowDeleting(this, new DistributionRowChangeEvent(((DistributionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDistributionRow(DistributionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                VCFDataSet ds = new VCFDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DistributionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DonationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDonationID;
            
            private System.Data.DataColumn columnDonationUserID;
            
            private System.Data.DataColumn columnBankAccount;
            
            private System.Data.DataColumn columnMoney;
            
            private System.Data.DataColumn columnDonationDate;
            
            private System.Data.DataColumn columnProjectID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DonationDataTable() {
                this.TableName = "Donation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DonationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DonationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DonationIDColumn {
                get {
                    return this.columnDonationID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DonationUserIDColumn {
                get {
                    return this.columnDonationUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankAccountColumn {
                get {
                    return this.columnBankAccount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MoneyColumn {
                get {
                    return this.columnMoney;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DonationDateColumn {
                get {
                    return this.columnDonationDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DonationRow this[int index] {
                get {
                    return ((DonationRow)(this.Rows[index]));
                }
            }
            
            public event DonationRowChangeEventHandler DonationRowChanging;
            
            public event DonationRowChangeEventHandler DonationRowChanged;
            
            public event DonationRowChangeEventHandler DonationRowDeleting;
            
            public event DonationRowChangeEventHandler DonationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDonationRow(DonationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DonationRow AddDonationRow(UserRow parentUserRowByFK_Donation_User, string BankAccount, decimal Money, System.DateTime DonationDate, ProjectRow parentProjectRowByFK_Donation_Project) {
                DonationRow rowDonationRow = ((DonationRow)(this.NewRow()));
                rowDonationRow.ItemArray = new object[] {
                        null,
                        parentUserRowByFK_Donation_User[0],
                        BankAccount,
                        Money,
                        DonationDate,
                        parentProjectRowByFK_Donation_Project[0]};
                this.Rows.Add(rowDonationRow);
                return rowDonationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DonationRow FindByDonationID(int DonationID) {
                return ((DonationRow)(this.Rows.Find(new object[] {
                            DonationID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DonationDataTable cln = ((DonationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DonationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDonationID = base.Columns["DonationID"];
                this.columnDonationUserID = base.Columns["DonationUserID"];
                this.columnBankAccount = base.Columns["BankAccount"];
                this.columnMoney = base.Columns["Money"];
                this.columnDonationDate = base.Columns["DonationDate"];
                this.columnProjectID = base.Columns["ProjectID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDonationID = new System.Data.DataColumn("DonationID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDonationID);
                this.columnDonationUserID = new System.Data.DataColumn("DonationUserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDonationUserID);
                this.columnBankAccount = new System.Data.DataColumn("BankAccount", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankAccount);
                this.columnMoney = new System.Data.DataColumn("Money", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMoney);
                this.columnDonationDate = new System.Data.DataColumn("DonationDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDonationDate);
                this.columnProjectID = new System.Data.DataColumn("ProjectID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDonationID}, true));
                this.columnDonationID.AutoIncrement = true;
                this.columnDonationID.AllowDBNull = false;
                this.columnDonationID.ReadOnly = true;
                this.columnDonationID.Unique = true;
                this.columnDonationUserID.AllowDBNull = false;
                this.columnBankAccount.AllowDBNull = false;
                this.columnBankAccount.MaxLength = 50;
                this.columnMoney.AllowDBNull = false;
                this.columnDonationDate.AllowDBNull = false;
                this.columnProjectID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DonationRow NewDonationRow() {
                return ((DonationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DonationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DonationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DonationRowChanged != null)) {
                    this.DonationRowChanged(this, new DonationRowChangeEvent(((DonationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DonationRowChanging != null)) {
                    this.DonationRowChanging(this, new DonationRowChangeEvent(((DonationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DonationRowDeleted != null)) {
                    this.DonationRowDeleted(this, new DonationRowChangeEvent(((DonationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DonationRowDeleting != null)) {
                    this.DonationRowDeleting(this, new DonationRowChangeEvent(((DonationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDonationRow(DonationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                VCFDataSet ds = new VCFDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DonationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserRelationShipDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSuperiorUserID;
            
            private System.Data.DataColumn columnInferiorUserID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRelationShipDataTable() {
                this.TableName = "UserRelationShip";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRelationShipDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserRelationShipDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SuperiorUserIDColumn {
                get {
                    return this.columnSuperiorUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InferiorUserIDColumn {
                get {
                    return this.columnInferiorUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRelationShipRow this[int index] {
                get {
                    return ((UserRelationShipRow)(this.Rows[index]));
                }
            }
            
            public event UserRelationShipRowChangeEventHandler UserRelationShipRowChanging;
            
            public event UserRelationShipRowChangeEventHandler UserRelationShipRowChanged;
            
            public event UserRelationShipRowChangeEventHandler UserRelationShipRowDeleting;
            
            public event UserRelationShipRowChangeEventHandler UserRelationShipRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRelationShipRow(UserRelationShipRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRelationShipRow AddUserRelationShipRow(UserRow parentUserRowByFK_UserRelationShip_User, UserRow parentUserRowByFK_UserRelationShip_User1) {
                UserRelationShipRow rowUserRelationShipRow = ((UserRelationShipRow)(this.NewRow()));
                rowUserRelationShipRow.ItemArray = new object[] {
                        parentUserRowByFK_UserRelationShip_User[0],
                        parentUserRowByFK_UserRelationShip_User1[0]};
                this.Rows.Add(rowUserRelationShipRow);
                return rowUserRelationShipRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRelationShipRow FindBySuperiorUserIDInferiorUserID(int SuperiorUserID, int InferiorUserID) {
                return ((UserRelationShipRow)(this.Rows.Find(new object[] {
                            SuperiorUserID,
                            InferiorUserID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UserRelationShipDataTable cln = ((UserRelationShipDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UserRelationShipDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSuperiorUserID = base.Columns["SuperiorUserID"];
                this.columnInferiorUserID = base.Columns["InferiorUserID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSuperiorUserID = new System.Data.DataColumn("SuperiorUserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSuperiorUserID);
                this.columnInferiorUserID = new System.Data.DataColumn("InferiorUserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInferiorUserID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSuperiorUserID,
                                this.columnInferiorUserID}, true));
                this.columnSuperiorUserID.AllowDBNull = false;
                this.columnInferiorUserID.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRelationShipRow NewUserRelationShipRow() {
                return ((UserRelationShipRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UserRelationShipRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UserRelationShipRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRelationShipRowChanged != null)) {
                    this.UserRelationShipRowChanged(this, new UserRelationShipRowChangeEvent(((UserRelationShipRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRelationShipRowChanging != null)) {
                    this.UserRelationShipRowChanging(this, new UserRelationShipRowChangeEvent(((UserRelationShipRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRelationShipRowDeleted != null)) {
                    this.UserRelationShipRowDeleted(this, new UserRelationShipRowChangeEvent(((UserRelationShipRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRelationShipRowDeleting != null)) {
                    this.UserRelationShipRowDeleting(this, new UserRelationShipRowChangeEvent(((UserRelationShipRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRelationShipRow(UserRelationShipRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                VCFDataSet ds = new VCFDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserRelationShipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnUserName;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnSecureQuestion;
            
            private System.Data.DataColumn columnSecureAnswer;
            
            private System.Data.DataColumn columnRole;
            
            private System.Data.DataColumn columnPhoto;
            
            private System.Data.DataColumn columnRegDate;
            
            private System.Data.DataColumn columnRealName;
            
            private System.Data.DataColumn columnSex;
            
            private System.Data.DataColumn columnAge;
            
            private System.Data.DataColumn columnTel;
            
            private System.Data.DataColumn columnEmail;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnComment;
            
            private System.Data.DataColumn columnBankAccount;
            
            private System.Data.DataColumn columnIdentityCard;
            
            private System.Data.DataColumn columnPosition;
            
            private System.Data.DataColumn columnFatherUserID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SecureQuestionColumn {
                get {
                    return this.columnSecureQuestion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SecureAnswerColumn {
                get {
                    return this.columnSecureAnswer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RoleColumn {
                get {
                    return this.columnRole;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PhotoColumn {
                get {
                    return this.columnPhoto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegDateColumn {
                get {
                    return this.columnRegDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RealNameColumn {
                get {
                    return this.columnRealName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TelColumn {
                get {
                    return this.columnTel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankAccountColumn {
                get {
                    return this.columnBankAccount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdentityCardColumn {
                get {
                    return this.columnIdentityCard;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FatherUserIDColumn {
                get {
                    return this.columnFatherUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(
                        string UserName, 
                        string Password, 
                        string SecureQuestion, 
                        string SecureAnswer, 
                        byte Role, 
                        string Photo, 
                        System.DateTime RegDate, 
                        string RealName, 
                        bool Sex, 
                        byte Age, 
                        string Tel, 
                        string Email, 
                        string Address, 
                        string Comment, 
                        string BankAccount, 
                        string IdentityCard, 
                        string Position, 
                        UserRow parentUserRowByFK_User_User) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                rowUserRow.ItemArray = new object[] {
                        null,
                        UserName,
                        Password,
                        SecureQuestion,
                        SecureAnswer,
                        Role,
                        Photo,
                        RegDate,
                        RealName,
                        Sex,
                        Age,
                        Tel,
                        Email,
                        Address,
                        Comment,
                        BankAccount,
                        IdentityCard,
                        Position,
                        parentUserRowByFK_User_User[0]};
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow FindByUserID(int UserID) {
                return ((UserRow)(this.Rows.Find(new object[] {
                            UserID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnUserName = base.Columns["UserName"];
                this.columnPassword = base.Columns["Password"];
                this.columnSecureQuestion = base.Columns["SecureQuestion"];
                this.columnSecureAnswer = base.Columns["SecureAnswer"];
                this.columnRole = base.Columns["Role"];
                this.columnPhoto = base.Columns["Photo"];
                this.columnRegDate = base.Columns["RegDate"];
                this.columnRealName = base.Columns["RealName"];
                this.columnSex = base.Columns["Sex"];
                this.columnAge = base.Columns["Age"];
                this.columnTel = base.Columns["Tel"];
                this.columnEmail = base.Columns["Email"];
                this.columnAddress = base.Columns["Address"];
                this.columnComment = base.Columns["Comment"];
                this.columnBankAccount = base.Columns["BankAccount"];
                this.columnIdentityCard = base.Columns["IdentityCard"];
                this.columnPosition = base.Columns["Position"];
                this.columnFatherUserID = base.Columns["FatherUserID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnUserName = new System.Data.DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnSecureQuestion = new System.Data.DataColumn("SecureQuestion", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecureQuestion);
                this.columnSecureAnswer = new System.Data.DataColumn("SecureAnswer", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecureAnswer);
                this.columnRole = new System.Data.DataColumn("Role", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRole);
                this.columnPhoto = new System.Data.DataColumn("Photo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoto);
                this.columnRegDate = new System.Data.DataColumn("RegDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDate);
                this.columnRealName = new System.Data.DataColumn("RealName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealName);
                this.columnSex = new System.Data.DataColumn("Sex", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSex);
                this.columnAge = new System.Data.DataColumn("Age", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAge);
                this.columnTel = new System.Data.DataColumn("Tel", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTel);
                this.columnEmail = new System.Data.DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnComment = new System.Data.DataColumn("Comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnBankAccount = new System.Data.DataColumn("BankAccount", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankAccount);
                this.columnIdentityCard = new System.Data.DataColumn("IdentityCard", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdentityCard);
                this.columnPosition = new System.Data.DataColumn("Position", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosition);
                this.columnFatherUserID = new System.Data.DataColumn("FatherUserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFatherUserID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserID}, true));
                this.columnUserID.AutoIncrement = true;
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.ReadOnly = true;
                this.columnUserID.Unique = true;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 50;
                this.columnPassword.AllowDBNull = false;
                this.columnPassword.MaxLength = 50;
                this.columnSecureQuestion.MaxLength = 50;
                this.columnSecureAnswer.MaxLength = 50;
                this.columnRole.AllowDBNull = false;
                this.columnPhoto.MaxLength = 100;
                this.columnRegDate.AllowDBNull = false;
                this.columnRealName.AllowDBNull = false;
                this.columnRealName.MaxLength = 50;
                this.columnTel.MaxLength = 15;
                this.columnEmail.AllowDBNull = false;
                this.columnEmail.MaxLength = 50;
                this.columnAddress.MaxLength = 100;
                this.columnComment.MaxLength = 2147483647;
                this.columnBankAccount.MaxLength = 50;
                this.columnIdentityCard.MaxLength = 50;
                this.columnPosition.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                VCFDataSet ds = new VCFDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnProjectID;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnDiscription;
            
            private System.Data.DataColumn columnManagerID;
            
            private System.Data.DataColumn columnCreateDate;
            
            private System.Data.DataColumn columnIsActive;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectDataTable() {
                this.TableName = "Project";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ProjectIDColumn {
                get {
                    return this.columnProjectID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DiscriptionColumn {
                get {
                    return this.columnDiscription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ManagerIDColumn {
                get {
                    return this.columnManagerID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow this[int index] {
                get {
                    return ((ProjectRow)(this.Rows[index]));
                }
            }
            
            public event ProjectRowChangeEventHandler ProjectRowChanging;
            
            public event ProjectRowChangeEventHandler ProjectRowChanged;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleting;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectRow(ProjectRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow AddProjectRow(string Name, string Discription, UserRow parentUserRowByFK_Project_Project, System.DateTime CreateDate, bool IsActive) {
                ProjectRow rowProjectRow = ((ProjectRow)(this.NewRow()));
                rowProjectRow.ItemArray = new object[] {
                        null,
                        Name,
                        Discription,
                        parentUserRowByFK_Project_Project[0],
                        CreateDate,
                        IsActive};
                this.Rows.Add(rowProjectRow);
                return rowProjectRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow FindByProjectID(int ProjectID) {
                return ((ProjectRow)(this.Rows.Find(new object[] {
                            ProjectID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ProjectDataTable cln = ((ProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ProjectDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectID = base.Columns["ProjectID"];
                this.columnName = base.Columns["Name"];
                this.columnDiscription = base.Columns["Discription"];
                this.columnManagerID = base.Columns["ManagerID"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectID = new System.Data.DataColumn("ProjectID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectID);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDiscription = new System.Data.DataColumn("Discription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscription);
                this.columnManagerID = new System.Data.DataColumn("ManagerID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnManagerID);
                this.columnCreateDate = new System.Data.DataColumn("CreateDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnIsActive = new System.Data.DataColumn("IsActive", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnProjectID}, true));
                this.columnProjectID.AutoIncrement = true;
                this.columnProjectID.AllowDBNull = false;
                this.columnProjectID.ReadOnly = true;
                this.columnProjectID.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnDiscription.AllowDBNull = false;
                this.columnDiscription.MaxLength = 2147483647;
                this.columnManagerID.AllowDBNull = false;
                this.columnCreateDate.AllowDBNull = false;
                this.columnIsActive.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow NewProjectRow() {
                return ((ProjectRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProjectRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ProjectRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRowChanged != null)) {
                    this.ProjectRowChanged(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRowChanging != null)) {
                    this.ProjectRowChanging(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRowDeleted != null)) {
                    this.ProjectRowDeleted(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRowDeleting != null)) {
                    this.ProjectRowDeleting(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectRow(ProjectRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                VCFDataSet ds = new VCFDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class V_FormatedUserDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnUserName;
            
            private System.Data.DataColumn columnPhoto;
            
            private System.Data.DataColumn columnRegDate;
            
            private System.Data.DataColumn columnRealName;
            
            private System.Data.DataColumn columnAge;
            
            private System.Data.DataColumn columnTel;
            
            private System.Data.DataColumn columnEmail;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnComment;
            
            private System.Data.DataColumn columnBankAccount;
            
            private System.Data.DataColumn columnIdentityCard;
            
            private System.Data.DataColumn columnPosition;
            
            private System.Data.DataColumn columnFatherUserID;
            
            private System.Data.DataColumn columnSex;
            
            private System.Data.DataColumn columnRole;
            
            private System.Data.DataColumn columnFatherUserName;
            
            private System.Data.DataColumn columnFatherRealName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_FormatedUserDataTable() {
                this.TableName = "V_FormatedUser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_FormatedUserDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected V_FormatedUserDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PhotoColumn {
                get {
                    return this.columnPhoto;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RegDateColumn {
                get {
                    return this.columnRegDate;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RealNameColumn {
                get {
                    return this.columnRealName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AgeColumn {
                get {
                    return this.columnAge;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TelColumn {
                get {
                    return this.columnTel;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn BankAccountColumn {
                get {
                    return this.columnBankAccount;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdentityCardColumn {
                get {
                    return this.columnIdentityCard;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FatherUserIDColumn {
                get {
                    return this.columnFatherUserID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SexColumn {
                get {
                    return this.columnSex;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RoleColumn {
                get {
                    return this.columnRole;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FatherUserNameColumn {
                get {
                    return this.columnFatherUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FatherRealNameColumn {
                get {
                    return this.columnFatherRealName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_FormatedUserRow this[int index] {
                get {
                    return ((V_FormatedUserRow)(this.Rows[index]));
                }
            }
            
            public event V_FormatedUserRowChangeEventHandler V_FormatedUserRowChanging;
            
            public event V_FormatedUserRowChangeEventHandler V_FormatedUserRowChanged;
            
            public event V_FormatedUserRowChangeEventHandler V_FormatedUserRowDeleting;
            
            public event V_FormatedUserRowChangeEventHandler V_FormatedUserRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddV_FormatedUserRow(V_FormatedUserRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_FormatedUserRow AddV_FormatedUserRow(
                        int UserID, 
                        string UserName, 
                        string Photo, 
                        System.DateTime RegDate, 
                        string RealName, 
                        byte Age, 
                        string Tel, 
                        string Email, 
                        string Address, 
                        string Comment, 
                        string BankAccount, 
                        string IdentityCard, 
                        string Position, 
                        int FatherUserID, 
                        string Sex, 
                        string Role, 
                        string FatherUserName, 
                        string FatherRealName) {
                V_FormatedUserRow rowV_FormatedUserRow = ((V_FormatedUserRow)(this.NewRow()));
                rowV_FormatedUserRow.ItemArray = new object[] {
                        UserID,
                        UserName,
                        Photo,
                        RegDate,
                        RealName,
                        Age,
                        Tel,
                        Email,
                        Address,
                        Comment,
                        BankAccount,
                        IdentityCard,
                        Position,
                        FatherUserID,
                        Sex,
                        Role,
                        FatherUserName,
                        FatherRealName};
                this.Rows.Add(rowV_FormatedUserRow);
                return rowV_FormatedUserRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                V_FormatedUserDataTable cln = ((V_FormatedUserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new V_FormatedUserDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnUserName = base.Columns["UserName"];
                this.columnPhoto = base.Columns["Photo"];
                this.columnRegDate = base.Columns["RegDate"];
                this.columnRealName = base.Columns["RealName"];
                this.columnAge = base.Columns["Age"];
                this.columnTel = base.Columns["Tel"];
                this.columnEmail = base.Columns["Email"];
                this.columnAddress = base.Columns["Address"];
                this.columnComment = base.Columns["Comment"];
                this.columnBankAccount = base.Columns["BankAccount"];
                this.columnIdentityCard = base.Columns["IdentityCard"];
                this.columnPosition = base.Columns["Position"];
                this.columnFatherUserID = base.Columns["FatherUserID"];
                this.columnSex = base.Columns["Sex"];
                this.columnRole = base.Columns["Role"];
                this.columnFatherUserName = base.Columns["FatherUserName"];
                this.columnFatherRealName = base.Columns["FatherRealName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnUserName = new System.Data.DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnPhoto = new System.Data.DataColumn("Photo", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoto);
                this.columnRegDate = new System.Data.DataColumn("RegDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegDate);
                this.columnRealName = new System.Data.DataColumn("RealName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRealName);
                this.columnAge = new System.Data.DataColumn("Age", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAge);
                this.columnTel = new System.Data.DataColumn("Tel", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTel);
                this.columnEmail = new System.Data.DataColumn("Email", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnComment = new System.Data.DataColumn("Comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnBankAccount = new System.Data.DataColumn("BankAccount", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnBankAccount);
                this.columnIdentityCard = new System.Data.DataColumn("IdentityCard", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIdentityCard);
                this.columnPosition = new System.Data.DataColumn("Position", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosition);
                this.columnFatherUserID = new System.Data.DataColumn("FatherUserID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFatherUserID);
                this.columnSex = new System.Data.DataColumn("Sex", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSex);
                this.columnRole = new System.Data.DataColumn("Role", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRole);
                this.columnFatherUserName = new System.Data.DataColumn("FatherUserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFatherUserName);
                this.columnFatherRealName = new System.Data.DataColumn("FatherRealName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFatherRealName);
                this.columnUserID.AllowDBNull = false;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 50;
                this.columnPhoto.MaxLength = 100;
                this.columnRegDate.AllowDBNull = false;
                this.columnRealName.AllowDBNull = false;
                this.columnRealName.MaxLength = 50;
                this.columnTel.MaxLength = 15;
                this.columnEmail.AllowDBNull = false;
                this.columnEmail.MaxLength = 50;
                this.columnAddress.MaxLength = 100;
                this.columnComment.MaxLength = 2147483647;
                this.columnBankAccount.AllowDBNull = false;
                this.columnBankAccount.MaxLength = 50;
                this.columnIdentityCard.AllowDBNull = false;
                this.columnIdentityCard.MaxLength = 50;
                this.columnPosition.MaxLength = 100;
                this.columnSex.ReadOnly = true;
                this.columnSex.MaxLength = 2;
                this.columnRole.ReadOnly = true;
                this.columnRole.MaxLength = 10;
                this.columnFatherUserName.AllowDBNull = false;
                this.columnFatherUserName.MaxLength = 50;
                this.columnFatherRealName.AllowDBNull = false;
                this.columnFatherRealName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_FormatedUserRow NewV_FormatedUserRow() {
                return ((V_FormatedUserRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new V_FormatedUserRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(V_FormatedUserRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.V_FormatedUserRowChanged != null)) {
                    this.V_FormatedUserRowChanged(this, new V_FormatedUserRowChangeEvent(((V_FormatedUserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.V_FormatedUserRowChanging != null)) {
                    this.V_FormatedUserRowChanging(this, new V_FormatedUserRowChangeEvent(((V_FormatedUserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.V_FormatedUserRowDeleted != null)) {
                    this.V_FormatedUserRowDeleted(this, new V_FormatedUserRowChangeEvent(((V_FormatedUserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.V_FormatedUserRowDeleting != null)) {
                    this.V_FormatedUserRowDeleting(this, new V_FormatedUserRowChangeEvent(((V_FormatedUserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveV_FormatedUserRow(V_FormatedUserRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                VCFDataSet ds = new VCFDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "V_FormatedUserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CityRow : System.Data.DataRow {
            
            private CityDataTable tableCity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCity = ((CityDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CityID {
                get {
                    return ((int)(this[this.tableCity.CityIDColumn]));
                }
                set {
                    this[this.tableCity.CityIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableCity.NameColumn]));
                }
                set {
                    this[this.tableCity.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Provience {
                get {
                    return ((string)(this[this.tableCity.ProvienceColumn]));
                }
                set {
                    this[this.tableCity.ProvienceColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DistributionRow : System.Data.DataRow {
            
            private DistributionDataTable tableDistribution;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DistributionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDistribution = ((DistributionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DistributionID {
                get {
                    return ((int)(this[this.tableDistribution.DistributionIDColumn]));
                }
                set {
                    this[this.tableDistribution.DistributionIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FromUserID {
                get {
                    return ((int)(this[this.tableDistribution.FromUserIDColumn]));
                }
                set {
                    this[this.tableDistribution.FromUserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToUserID {
                get {
                    return ((int)(this[this.tableDistribution.ToUserIDColumn]));
                }
                set {
                    this[this.tableDistribution.ToUserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DistributionType {
                get {
                    return ((byte)(this[this.tableDistribution.DistributionTypeColumn]));
                }
                set {
                    this[this.tableDistribution.DistributionTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Purpose {
                get {
                    return ((string)(this[this.tableDistribution.PurposeColumn]));
                }
                set {
                    this[this.tableDistribution.PurposeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableDistribution.ProjectIDColumn]));
                }
                set {
                    this[this.tableDistribution.ProjectIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DistributionDate {
                get {
                    return ((System.DateTime)(this[this.tableDistribution.DistributionDateColumn]));
                }
                set {
                    this[this.tableDistribution.DistributionDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Money {
                get {
                    return ((decimal)(this[this.tableDistribution.MoneyColumn]));
                }
                set {
                    this[this.tableDistribution.MoneyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte FeecbackStatus {
                get {
                    return ((byte)(this[this.tableDistribution.FeecbackStatusColumn]));
                }
                set {
                    this[this.tableDistribution.FeecbackStatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRowByFK_Distribution_User {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_Distribution_User"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Distribution_User"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRowByFK_Distribution_User1 {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_Distribution_User1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Distribution_User1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow ProjectRow {
                get {
                    return ((ProjectRow)(this.GetParentRow(this.Table.ParentRelations["FK_Distribution_Project"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Distribution_Project"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DonationRow : System.Data.DataRow {
            
            private DonationDataTable tableDonation;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DonationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDonation = ((DonationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DonationID {
                get {
                    return ((int)(this[this.tableDonation.DonationIDColumn]));
                }
                set {
                    this[this.tableDonation.DonationIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DonationUserID {
                get {
                    return ((int)(this[this.tableDonation.DonationUserIDColumn]));
                }
                set {
                    this[this.tableDonation.DonationUserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankAccount {
                get {
                    return ((string)(this[this.tableDonation.BankAccountColumn]));
                }
                set {
                    this[this.tableDonation.BankAccountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Money {
                get {
                    return ((decimal)(this[this.tableDonation.MoneyColumn]));
                }
                set {
                    this[this.tableDonation.MoneyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DonationDate {
                get {
                    return ((System.DateTime)(this[this.tableDonation.DonationDateColumn]));
                }
                set {
                    this[this.tableDonation.DonationDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableDonation.ProjectIDColumn]));
                }
                set {
                    this[this.tableDonation.ProjectIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRow {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_Donation_User"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Donation_User"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow ProjectRow {
                get {
                    return ((ProjectRow)(this.GetParentRow(this.Table.ParentRelations["FK_Donation_Project"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Donation_Project"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserRelationShipRow : System.Data.DataRow {
            
            private UserRelationShipDataTable tableUserRelationShip;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRelationShipRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserRelationShip = ((UserRelationShipDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SuperiorUserID {
                get {
                    return ((int)(this[this.tableUserRelationShip.SuperiorUserIDColumn]));
                }
                set {
                    this[this.tableUserRelationShip.SuperiorUserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int InferiorUserID {
                get {
                    return ((int)(this[this.tableUserRelationShip.InferiorUserIDColumn]));
                }
                set {
                    this[this.tableUserRelationShip.InferiorUserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRowByFK_UserRelationShip_User {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_UserRelationShip_User"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_UserRelationShip_User"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRowByFK_UserRelationShip_User1 {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_UserRelationShip_User1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_UserRelationShip_User1"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserRow : System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableUser.UserIDColumn]));
                }
                set {
                    this[this.tableUser.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableUser.UserNameColumn]));
                }
                set {
                    this[this.tableUser.UserNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableUser.PasswordColumn]));
                }
                set {
                    this[this.tableUser.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SecureQuestion {
                get {
                    try {
                        return ((string)(this[this.tableUser.SecureQuestionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“SecureQuestion”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.SecureQuestionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SecureAnswer {
                get {
                    try {
                        return ((string)(this[this.tableUser.SecureAnswerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“SecureAnswer”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.SecureAnswerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Role {
                get {
                    return ((byte)(this[this.tableUser.RoleColumn]));
                }
                set {
                    this[this.tableUser.RoleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Photo {
                get {
                    try {
                        return ((string)(this[this.tableUser.PhotoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“Photo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.PhotoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RegDate {
                get {
                    return ((System.DateTime)(this[this.tableUser.RegDateColumn]));
                }
                set {
                    this[this.tableUser.RegDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RealName {
                get {
                    return ((string)(this[this.tableUser.RealNameColumn]));
                }
                set {
                    this[this.tableUser.RealNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Sex {
                get {
                    try {
                        return ((bool)(this[this.tableUser.SexColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“Sex”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.SexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Age {
                get {
                    try {
                        return ((byte)(this[this.tableUser.AgeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“Age”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.AgeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tel {
                get {
                    try {
                        return ((string)(this[this.tableUser.TelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“Tel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.TelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    return ((string)(this[this.tableUser.EmailColumn]));
                }
                set {
                    this[this.tableUser.EmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableUser.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“Address”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableUser.CommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“Comment”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.CommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankAccount {
                get {
                    try {
                        return ((string)(this[this.tableUser.BankAccountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“BankAccount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.BankAccountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IdentityCard {
                get {
                    try {
                        return ((string)(this[this.tableUser.IdentityCardColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“IdentityCard”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.IdentityCardColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Position {
                get {
                    try {
                        return ((string)(this[this.tableUser.PositionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“Position”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.PositionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FatherUserID {
                get {
                    try {
                        return ((int)(this[this.tableUser.FatherUserIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“User”中列“FatherUserID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUser.FatherUserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRowParent {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_User_User"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_User_User"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecureQuestionNull() {
                return this.IsNull(this.tableUser.SecureQuestionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecureQuestionNull() {
                this[this.tableUser.SecureQuestionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecureAnswerNull() {
                return this.IsNull(this.tableUser.SecureAnswerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecureAnswerNull() {
                this[this.tableUser.SecureAnswerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhotoNull() {
                return this.IsNull(this.tableUser.PhotoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhotoNull() {
                this[this.tableUser.PhotoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSexNull() {
                return this.IsNull(this.tableUser.SexColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSexNull() {
                this[this.tableUser.SexColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeNull() {
                return this.IsNull(this.tableUser.AgeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeNull() {
                this[this.tableUser.AgeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelNull() {
                return this.IsNull(this.tableUser.TelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelNull() {
                this[this.tableUser.TelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableUser.AddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableUser.AddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableUser.CommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableUser.CommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBankAccountNull() {
                return this.IsNull(this.tableUser.BankAccountColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBankAccountNull() {
                this[this.tableUser.BankAccountColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdentityCardNull() {
                return this.IsNull(this.tableUser.IdentityCardColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdentityCardNull() {
                this[this.tableUser.IdentityCardColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNull() {
                return this.IsNull(this.tableUser.PositionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNull() {
                this[this.tableUser.PositionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFatherUserIDNull() {
                return this.IsNull(this.tableUser.FatherUserIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFatherUserIDNull() {
                this[this.tableUser.FatherUserIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow[] GetUserRows() {
                return ((UserRow[])(base.GetChildRows(this.Table.ChildRelations["FK_User_User"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionRow[] GetDistributionRowsByFK_Distribution_User() {
                return ((DistributionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Distribution_User"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionRow[] GetDistributionRowsByFK_Distribution_User1() {
                return ((DistributionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Distribution_User1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DonationRow[] GetDonationRows() {
                return ((DonationRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Donation_User"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRelationShipRow[] GetUserRelationShipRowsByFK_UserRelationShip_User() {
                return ((UserRelationShipRow[])(base.GetChildRows(this.Table.ChildRelations["FK_UserRelationShip_User"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRelationShipRow[] GetUserRelationShipRowsByFK_UserRelationShip_User1() {
                return ((UserRelationShipRow[])(base.GetChildRows(this.Table.ChildRelations["FK_UserRelationShip_User1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow[] GetProjectRows() {
                return ((ProjectRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Project_Project"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectRow : System.Data.DataRow {
            
            private ProjectDataTable tableProject;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProject = ((ProjectDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectID {
                get {
                    return ((int)(this[this.tableProject.ProjectIDColumn]));
                }
                set {
                    this[this.tableProject.ProjectIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProject.NameColumn]));
                }
                set {
                    this[this.tableProject.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Discription {
                get {
                    return ((string)(this[this.tableProject.DiscriptionColumn]));
                }
                set {
                    this[this.tableProject.DiscriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ManagerID {
                get {
                    return ((int)(this[this.tableProject.ManagerIDColumn]));
                }
                set {
                    this[this.tableProject.ManagerIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((System.DateTime)(this[this.tableProject.CreateDateColumn]));
                }
                set {
                    this[this.tableProject.CreateDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableProject.IsActiveColumn]));
                }
                set {
                    this[this.tableProject.IsActiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRow {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_Project_Project"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Project_Project"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionRow[] GetDistributionRows() {
                return ((DistributionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Distribution_Project"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DonationRow[] GetDonationRows() {
                return ((DonationRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Donation_Project"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class V_FormatedUserRow : System.Data.DataRow {
            
            private V_FormatedUserDataTable tableV_FormatedUser;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal V_FormatedUserRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableV_FormatedUser = ((V_FormatedUserDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableV_FormatedUser.UserIDColumn]));
                }
                set {
                    this[this.tableV_FormatedUser.UserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableV_FormatedUser.UserNameColumn]));
                }
                set {
                    this[this.tableV_FormatedUser.UserNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Photo {
                get {
                    try {
                        return ((string)(this[this.tableV_FormatedUser.PhotoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“V_FormatedUser”中列“Photo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_FormatedUser.PhotoColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RegDate {
                get {
                    return ((System.DateTime)(this[this.tableV_FormatedUser.RegDateColumn]));
                }
                set {
                    this[this.tableV_FormatedUser.RegDateColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RealName {
                get {
                    return ((string)(this[this.tableV_FormatedUser.RealNameColumn]));
                }
                set {
                    this[this.tableV_FormatedUser.RealNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Age {
                get {
                    try {
                        return ((byte)(this[this.tableV_FormatedUser.AgeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“V_FormatedUser”中列“Age”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_FormatedUser.AgeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tel {
                get {
                    try {
                        return ((string)(this[this.tableV_FormatedUser.TelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“V_FormatedUser”中列“Tel”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_FormatedUser.TelColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    return ((string)(this[this.tableV_FormatedUser.EmailColumn]));
                }
                set {
                    this[this.tableV_FormatedUser.EmailColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableV_FormatedUser.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“V_FormatedUser”中列“Address”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_FormatedUser.AddressColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableV_FormatedUser.CommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“V_FormatedUser”中列“Comment”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_FormatedUser.CommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BankAccount {
                get {
                    return ((string)(this[this.tableV_FormatedUser.BankAccountColumn]));
                }
                set {
                    this[this.tableV_FormatedUser.BankAccountColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IdentityCard {
                get {
                    return ((string)(this[this.tableV_FormatedUser.IdentityCardColumn]));
                }
                set {
                    this[this.tableV_FormatedUser.IdentityCardColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Position {
                get {
                    try {
                        return ((string)(this[this.tableV_FormatedUser.PositionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“V_FormatedUser”中列“Position”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_FormatedUser.PositionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FatherUserID {
                get {
                    try {
                        return ((int)(this[this.tableV_FormatedUser.FatherUserIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“V_FormatedUser”中列“FatherUserID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_FormatedUser.FatherUserIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Sex {
                get {
                    try {
                        return ((string)(this[this.tableV_FormatedUser.SexColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“V_FormatedUser”中列“Sex”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_FormatedUser.SexColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Role {
                get {
                    try {
                        return ((string)(this[this.tableV_FormatedUser.RoleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“V_FormatedUser”中列“Role”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableV_FormatedUser.RoleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FatherUserName {
                get {
                    return ((string)(this[this.tableV_FormatedUser.FatherUserNameColumn]));
                }
                set {
                    this[this.tableV_FormatedUser.FatherUserNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FatherRealName {
                get {
                    return ((string)(this[this.tableV_FormatedUser.FatherRealNameColumn]));
                }
                set {
                    this[this.tableV_FormatedUser.FatherRealNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhotoNull() {
                return this.IsNull(this.tableV_FormatedUser.PhotoColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhotoNull() {
                this[this.tableV_FormatedUser.PhotoColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeNull() {
                return this.IsNull(this.tableV_FormatedUser.AgeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeNull() {
                this[this.tableV_FormatedUser.AgeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTelNull() {
                return this.IsNull(this.tableV_FormatedUser.TelColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTelNull() {
                this[this.tableV_FormatedUser.TelColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tableV_FormatedUser.AddressColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tableV_FormatedUser.AddressColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableV_FormatedUser.CommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableV_FormatedUser.CommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPositionNull() {
                return this.IsNull(this.tableV_FormatedUser.PositionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPositionNull() {
                this[this.tableV_FormatedUser.PositionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFatherUserIDNull() {
                return this.IsNull(this.tableV_FormatedUser.FatherUserIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFatherUserIDNull() {
                this[this.tableV_FormatedUser.FatherUserIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSexNull() {
                return this.IsNull(this.tableV_FormatedUser.SexColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSexNull() {
                this[this.tableV_FormatedUser.SexColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoleNull() {
                return this.IsNull(this.tableV_FormatedUser.RoleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoleNull() {
                this[this.tableV_FormatedUser.RoleColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CityRowChangeEvent : System.EventArgs {
            
            private CityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRowChangeEvent(CityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DistributionRowChangeEvent : System.EventArgs {
            
            private DistributionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionRowChangeEvent(DistributionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DistributionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DonationRowChangeEvent : System.EventArgs {
            
            private DonationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DonationRowChangeEvent(DonationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DonationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserRelationShipRowChangeEvent : System.EventArgs {
            
            private UserRelationShipRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRelationShipRowChangeEvent(UserRelationShipRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRelationShipRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserRowChangeEvent : System.EventArgs {
            
            private UserRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectRowChangeEvent : System.EventArgs {
            
            private ProjectRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRowChangeEvent(ProjectRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class V_FormatedUserRowChangeEvent : System.EventArgs {
            
            private V_FormatedUserRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_FormatedUserRowChangeEvent(V_FormatedUserRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public V_FormatedUserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace BLL.VCFDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CityTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CityTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "City";
            tableMapping.ColumnMappings.Add("CityID", "CityID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Provience", "Provience");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[City] WHERE (([CityID] = @Original_CityID) AND ([Name] = @Orig" +
                "inal_Name) AND ([Provience] = @Original_Provience))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CityID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CityID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Provience", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Provience", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[City] ([CityID], [Name], [Provience]) VALUES (@CityID, @Name, " +
                "@Provience);\r\nSELECT CityID, Name, Provience FROM City WHERE (CityID = @CityID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CityID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CityID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Provience", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Provience", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[City] SET [CityID] = @CityID, [Name] = @Name, [Provience] = @Provience WHERE (([CityID] = @Original_CityID) AND ([Name] = @Original_Name) AND ([Provience] = @Original_Provience));
SELECT CityID, Name, Provience FROM City WHERE (CityID = @CityID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CityID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CityID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Provience", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Provience", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CityID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CityID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Provience", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Provience", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::BLL.Properties.Settings.Default.VCFConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CityID, Name, Provience FROM dbo.City";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(VCFDataSet.CityDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual VCFDataSet.CityDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            VCFDataSet.CityDataTable dataTable = new VCFDataSet.CityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet.CityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet dataSet) {
            return this.Adapter.Update(dataSet, "City");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CityID, string Original_Name, string Original_Provience) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CityID));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_Provience == null)) {
                throw new System.ArgumentNullException("Original_Provience");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Provience));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CityID, string Name, string Provience) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CityID));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((Provience == null)) {
                throw new System.ArgumentNullException("Provience");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Provience));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int CityID, string Name, string Provience, int Original_CityID, string Original_Name, string Original_Provience) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CityID));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((Provience == null)) {
                throw new System.ArgumentNullException("Provience");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Provience));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_CityID));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            if ((Original_Provience == null)) {
                throw new System.ArgumentNullException("Original_Provience");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Provience));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DistributionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DistributionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Distribution";
            tableMapping.ColumnMappings.Add("DistributionID", "DistributionID");
            tableMapping.ColumnMappings.Add("FromUserID", "FromUserID");
            tableMapping.ColumnMappings.Add("ToUserID", "ToUserID");
            tableMapping.ColumnMappings.Add("DistributionType", "DistributionType");
            tableMapping.ColumnMappings.Add("Purpose", "Purpose");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            tableMapping.ColumnMappings.Add("DistributionDate", "DistributionDate");
            tableMapping.ColumnMappings.Add("Money", "Money");
            tableMapping.ColumnMappings.Add("FeecbackStatus", "FeecbackStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Distribution] WHERE (([DistributionID] = @Original_DistributionID) AND ([FromUserID] = @Original_FromUserID) AND ([ToUserID] = @Original_ToUserID) AND ([DistributionType] = @Original_DistributionType) AND ([ProjectID] = @Original_ProjectID) AND ([DistributionDate] = @Original_DistributionDate) AND ([Money] = @Original_Money) AND ([FeecbackStatus] = @Original_FeecbackStatus))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DistributionID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FromUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FromUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ToUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ToUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DistributionType", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DistributionDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Money", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Money", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeecbackStatus", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FeecbackStatus", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Distribution] ([FromUserID], [ToUserID], [DistributionType], [Purpose], [ProjectID], [DistributionDate], [Money], [FeecbackStatus]) VALUES (@FromUserID, @ToUserID, @DistributionType, @Purpose, @ProjectID, @DistributionDate, @Money, @FeecbackStatus);
SELECT DistributionID, FromUserID, ToUserID, DistributionType, Purpose, ProjectID, DistributionDate, Money, FeecbackStatus FROM Distribution WHERE (DistributionID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FromUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FromUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ToUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ToUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DistributionType", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Purpose", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Purpose", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DistributionDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Money", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Money", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeecbackStatus", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FeecbackStatus", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Distribution] SET [FromUserID] = @FromUserID, [ToUserID] = @ToUserID, [DistributionType] = @DistributionType, [Purpose] = @Purpose, [ProjectID] = @ProjectID, [DistributionDate] = @DistributionDate, [Money] = @Money, [FeecbackStatus] = @FeecbackStatus WHERE (([DistributionID] = @Original_DistributionID) AND ([FromUserID] = @Original_FromUserID) AND ([ToUserID] = @Original_ToUserID) AND ([DistributionType] = @Original_DistributionType) AND ([ProjectID] = @Original_ProjectID) AND ([DistributionDate] = @Original_DistributionDate) AND ([Money] = @Original_Money) AND ([FeecbackStatus] = @Original_FeecbackStatus));
SELECT DistributionID, FromUserID, ToUserID, DistributionType, Purpose, ProjectID, DistributionDate, Money, FeecbackStatus FROM Distribution WHERE (DistributionID = @DistributionID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FromUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FromUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ToUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ToUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DistributionType", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Purpose", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Purpose", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DistributionDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Money", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Money", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FeecbackStatus", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FeecbackStatus", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DistributionID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FromUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FromUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ToUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ToUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DistributionType", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DistributionDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DistributionDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Money", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Money", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FeecbackStatus", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "FeecbackStatus", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DistributionID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DistributionID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::BLL.Properties.Settings.Default.VCFConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DistributionID, FromUserID, ToUserID, DistributionType, Purpose, ProjectID" +
                ", DistributionDate, Money, FeecbackStatus FROM dbo.Distribution";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(VCFDataSet.DistributionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual VCFDataSet.DistributionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            VCFDataSet.DistributionDataTable dataTable = new VCFDataSet.DistributionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet.DistributionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Distribution");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DistributionID, int Original_FromUserID, int Original_ToUserID, byte Original_DistributionType, int Original_ProjectID, System.DateTime Original_DistributionDate, decimal Original_Money, byte Original_FeecbackStatus) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DistributionID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_FromUserID));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ToUserID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((byte)(Original_DistributionType));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ProjectID));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_DistributionDate));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((decimal)(Original_Money));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((byte)(Original_FeecbackStatus));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int FromUserID, int ToUserID, byte DistributionType, string Purpose, int ProjectID, System.DateTime DistributionDate, decimal Money, byte FeecbackStatus) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(FromUserID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ToUserID));
            this.Adapter.InsertCommand.Parameters[2].Value = ((byte)(DistributionType));
            if ((Purpose == null)) {
                throw new System.ArgumentNullException("Purpose");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Purpose));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ProjectID));
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(DistributionDate));
            this.Adapter.InsertCommand.Parameters[6].Value = ((decimal)(Money));
            this.Adapter.InsertCommand.Parameters[7].Value = ((byte)(FeecbackStatus));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int FromUserID, 
                    int ToUserID, 
                    byte DistributionType, 
                    string Purpose, 
                    int ProjectID, 
                    System.DateTime DistributionDate, 
                    decimal Money, 
                    byte FeecbackStatus, 
                    int Original_DistributionID, 
                    int Original_FromUserID, 
                    int Original_ToUserID, 
                    byte Original_DistributionType, 
                    int Original_ProjectID, 
                    System.DateTime Original_DistributionDate, 
                    decimal Original_Money, 
                    byte Original_FeecbackStatus, 
                    int DistributionID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(FromUserID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ToUserID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(DistributionType));
            if ((Purpose == null)) {
                throw new System.ArgumentNullException("Purpose");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Purpose));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ProjectID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(DistributionDate));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((decimal)(Money));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((byte)(FeecbackStatus));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_DistributionID));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_FromUserID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ToUserID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((byte)(Original_DistributionType));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_ProjectID));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_DistributionDate));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((decimal)(Original_Money));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((byte)(Original_FeecbackStatus));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(DistributionID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DonationTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DonationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Donation";
            tableMapping.ColumnMappings.Add("DonationID", "DonationID");
            tableMapping.ColumnMappings.Add("DonationUserID", "DonationUserID");
            tableMapping.ColumnMappings.Add("BankAccount", "BankAccount");
            tableMapping.ColumnMappings.Add("Money", "Money");
            tableMapping.ColumnMappings.Add("DonationDate", "DonationDate");
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Donation] WHERE (([DonationID] = @Original_DonationID) AND ([DonationUserID] = @Original_DonationUserID) AND ([BankAccount] = @Original_BankAccount) AND ([Money] = @Original_Money) AND ([DonationDate] = @Original_DonationDate) AND ([ProjectID] = @Original_ProjectID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DonationID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DonationUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BankAccount", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Money", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Money", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DonationDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Donation] ([DonationUserID], [BankAccount], [Money], [DonationDate], [ProjectID]) VALUES (@DonationUserID, @BankAccount, @Money, @DonationDate, @ProjectID);
SELECT DonationID, DonationUserID, BankAccount, Money, DonationDate, ProjectID FROM Donation WHERE (DonationID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DonationUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankAccount", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Money", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Money", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DonationDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Donation] SET [DonationUserID] = @DonationUserID, [BankAccount] = @BankAccount, [Money] = @Money, [DonationDate] = @DonationDate, [ProjectID] = @ProjectID WHERE (([DonationID] = @Original_DonationID) AND ([DonationUserID] = @Original_DonationUserID) AND ([BankAccount] = @Original_BankAccount) AND ([Money] = @Original_Money) AND ([DonationDate] = @Original_DonationDate) AND ([ProjectID] = @Original_ProjectID));
SELECT DonationID, DonationUserID, BankAccount, Money, DonationDate, ProjectID FROM Donation WHERE (DonationID = @DonationID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DonationUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankAccount", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Money", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Money", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DonationDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DonationID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DonationUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BankAccount", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Money", System.Data.SqlDbType.Money, 0, System.Data.ParameterDirection.Input, 0, 0, "Money", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DonationDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "DonationDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DonationID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "DonationID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::BLL.Properties.Settings.Default.VCFConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DonationID, DonationUserID, BankAccount, Money, DonationDate, ProjectID FR" +
                "OM dbo.Donation";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(VCFDataSet.DonationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual VCFDataSet.DonationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            VCFDataSet.DonationDataTable dataTable = new VCFDataSet.DonationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet.DonationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Donation");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DonationID, int Original_DonationUserID, string Original_BankAccount, decimal Original_Money, System.DateTime Original_DonationDate, int Original_ProjectID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DonationID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_DonationUserID));
            if ((Original_BankAccount == null)) {
                throw new System.ArgumentNullException("Original_BankAccount");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_BankAccount));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((decimal)(Original_Money));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_DonationDate));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_ProjectID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int DonationUserID, string BankAccount, decimal Money, System.DateTime DonationDate, int ProjectID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(DonationUserID));
            if ((BankAccount == null)) {
                throw new System.ArgumentNullException("BankAccount");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BankAccount));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((decimal)(Money));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DonationDate));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(ProjectID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int DonationUserID, string BankAccount, decimal Money, System.DateTime DonationDate, int ProjectID, int Original_DonationID, int Original_DonationUserID, string Original_BankAccount, decimal Original_Money, System.DateTime Original_DonationDate, int Original_ProjectID, int DonationID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(DonationUserID));
            if ((BankAccount == null)) {
                throw new System.ArgumentNullException("BankAccount");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(BankAccount));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((decimal)(Money));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DonationDate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(ProjectID));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_DonationID));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_DonationUserID));
            if ((Original_BankAccount == null)) {
                throw new System.ArgumentNullException("Original_BankAccount");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_BankAccount));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((decimal)(Original_Money));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_DonationDate));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ProjectID));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(DonationID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserRelationShipTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserRelationShipTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserRelationShip";
            tableMapping.ColumnMappings.Add("SuperiorUserID", "SuperiorUserID");
            tableMapping.ColumnMappings.Add("InferiorUserID", "InferiorUserID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[UserRelationShip] WHERE (([SuperiorUserID] = @Original_Superio" +
                "rUserID) AND ([InferiorUserID] = @Original_InferiorUserID))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SuperiorUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SuperiorUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_InferiorUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "InferiorUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[UserRelationShip] ([SuperiorUserID], [InferiorUserID]) VALUES (@SuperiorUserID, @InferiorUserID);
SELECT SuperiorUserID, InferiorUserID FROM UserRelationShip WHERE (InferiorUserID = @InferiorUserID) AND (SuperiorUserID = @SuperiorUserID)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SuperiorUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SuperiorUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@InferiorUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "InferiorUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[UserRelationShip] SET [SuperiorUserID] = @SuperiorUserID, [InferiorUserID] = @InferiorUserID WHERE (([SuperiorUserID] = @Original_SuperiorUserID) AND ([InferiorUserID] = @Original_InferiorUserID));
SELECT SuperiorUserID, InferiorUserID FROM UserRelationShip WHERE (InferiorUserID = @InferiorUserID) AND (SuperiorUserID = @SuperiorUserID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SuperiorUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SuperiorUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@InferiorUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "InferiorUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SuperiorUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SuperiorUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_InferiorUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "InferiorUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::BLL.Properties.Settings.Default.VCFConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SuperiorUserID, InferiorUserID FROM dbo.UserRelationShip";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(VCFDataSet.UserRelationShipDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual VCFDataSet.UserRelationShipDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            VCFDataSet.UserRelationShipDataTable dataTable = new VCFDataSet.UserRelationShipDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet.UserRelationShipDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet dataSet) {
            return this.Adapter.Update(dataSet, "UserRelationShip");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SuperiorUserID, int Original_InferiorUserID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SuperiorUserID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_InferiorUserID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SuperiorUserID, int InferiorUserID) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SuperiorUserID));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(InferiorUserID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SuperiorUserID, int InferiorUserID, int Original_SuperiorUserID, int Original_InferiorUserID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SuperiorUserID));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(InferiorUserID));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_SuperiorUserID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_InferiorUserID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "User";
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("Password", "Password");
            tableMapping.ColumnMappings.Add("SecureQuestion", "SecureQuestion");
            tableMapping.ColumnMappings.Add("SecureAnswer", "SecureAnswer");
            tableMapping.ColumnMappings.Add("Role", "Role");
            tableMapping.ColumnMappings.Add("Photo", "Photo");
            tableMapping.ColumnMappings.Add("RegDate", "RegDate");
            tableMapping.ColumnMappings.Add("RealName", "RealName");
            tableMapping.ColumnMappings.Add("Sex", "Sex");
            tableMapping.ColumnMappings.Add("Age", "Age");
            tableMapping.ColumnMappings.Add("Tel", "Tel");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("BankAccount", "BankAccount");
            tableMapping.ColumnMappings.Add("IdentityCard", "IdentityCard");
            tableMapping.ColumnMappings.Add("Position", "Position");
            tableMapping.ColumnMappings.Add("FatherUserID", "FatherUserID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[User] WHERE (([UserID] = @Original_UserID) AND ([UserName] = @Original_UserName) AND ([Password] = @Original_Password) AND ((@IsNull_SecureQuestion = 1 AND [SecureQuestion] IS NULL) OR ([SecureQuestion] = @Original_SecureQuestion)) AND ((@IsNull_SecureAnswer = 1 AND [SecureAnswer] IS NULL) OR ([SecureAnswer] = @Original_SecureAnswer)) AND ([Role] = @Original_Role) AND ((@IsNull_Photo = 1 AND [Photo] IS NULL) OR ([Photo] = @Original_Photo)) AND ([RegDate] = @Original_RegDate) AND ([RealName] = @Original_RealName) AND ((@IsNull_Sex = 1 AND [Sex] IS NULL) OR ([Sex] = @Original_Sex)) AND ((@IsNull_Age = 1 AND [Age] IS NULL) OR ([Age] = @Original_Age)) AND ((@IsNull_Tel = 1 AND [Tel] IS NULL) OR ([Tel] = @Original_Tel)) AND ([Email] = @Original_Email) AND ((@IsNull_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND ((@IsNull_BankAccount = 1 AND [BankAccount] IS NULL) OR ([BankAccount] = @Original_BankAccount)) AND ((@IsNull_IdentityCard = 1 AND [IdentityCard] IS NULL) OR ([IdentityCard] = @Original_IdentityCard)) AND ((@IsNull_Position = 1 AND [Position] IS NULL) OR ([Position] = @Original_Position)) AND ((@IsNull_FatherUserID = 1 AND [FatherUserID] IS NULL) OR ([FatherUserID] = @Original_FatherUserID)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SecureQuestion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureQuestion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SecureQuestion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureQuestion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SecureAnswer", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureAnswer", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SecureAnswer", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureAnswer", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Role", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Role", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Photo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Photo", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Photo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Photo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RegDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RegDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RealName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RealName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Sex", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Sex", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Sex", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Sex", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Age", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Age", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Tel", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Tel", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Tel", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Tel", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Address", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_BankAccount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BankAccount", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_IdentityCard", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IdentityCard", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IdentityCard", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IdentityCard", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Position", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Position", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Position", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Position", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_FatherUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FatherUserID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FatherUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FatherUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[User] ([UserName], [Password], [SecureQuestion], [SecureAnswer], [Role], [Photo], [RegDate], [RealName], [Sex], [Age], [Tel], [Email], [Address], [Comment], [BankAccount], [IdentityCard], [Position], [FatherUserID]) VALUES (@UserName, @Password, @SecureQuestion, @SecureAnswer, @Role, @Photo, @RegDate, @RealName, @Sex, @Age, @Tel, @Email, @Address, @Comment, @BankAccount, @IdentityCard, @Position, @FatherUserID);
SELECT UserID, UserName, Password, SecureQuestion, SecureAnswer, Role, Photo, RegDate, RealName, Sex, Age, Tel, Email, Address, Comment, BankAccount, IdentityCard, Position, FatherUserID FROM [User] WHERE (UserID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SecureQuestion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureQuestion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SecureAnswer", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureAnswer", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Role", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Role", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Photo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Photo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RegDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RegDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RealName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RealName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sex", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Sex", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Age", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Tel", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Tel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Comment", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankAccount", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityCard", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IdentityCard", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Position", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Position", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FatherUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FatherUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[User] SET [UserName] = @UserName, [Password] = @Password, [SecureQu" +
                "estion] = @SecureQuestion, [SecureAnswer] = @SecureAnswer, [Role] = @Role, [Phot" +
                "o] = @Photo, [RegDate] = @RegDate, [RealName] = @RealName, [Sex] = @Sex, [Age] =" +
                " @Age, [Tel] = @Tel, [Email] = @Email, [Address] = @Address, [Comment] = @Commen" +
                "t, [BankAccount] = @BankAccount, [IdentityCard] = @IdentityCard, [Position] = @P" +
                "osition, [FatherUserID] = @FatherUserID WHERE (([UserID] = @Original_UserID) AND" +
                " ([UserName] = @Original_UserName) AND ([Password] = @Original_Password) AND ((@" +
                "IsNull_SecureQuestion = 1 AND [SecureQuestion] IS NULL) OR ([SecureQuestion] = @" +
                "Original_SecureQuestion)) AND ((@IsNull_SecureAnswer = 1 AND [SecureAnswer] IS N" +
                "ULL) OR ([SecureAnswer] = @Original_SecureAnswer)) AND ([Role] = @Original_Role)" +
                " AND ((@IsNull_Photo = 1 AND [Photo] IS NULL) OR ([Photo] = @Original_Photo)) AN" +
                "D ([RegDate] = @Original_RegDate) AND ([RealName] = @Original_RealName) AND ((@I" +
                "sNull_Sex = 1 AND [Sex] IS NULL) OR ([Sex] = @Original_Sex)) AND ((@IsNull_Age =" +
                " 1 AND [Age] IS NULL) OR ([Age] = @Original_Age)) AND ((@IsNull_Tel = 1 AND [Tel" +
                "] IS NULL) OR ([Tel] = @Original_Tel)) AND ([Email] = @Original_Email) AND ((@Is" +
                "Null_Address = 1 AND [Address] IS NULL) OR ([Address] = @Original_Address)) AND " +
                "((@IsNull_BankAccount = 1 AND [BankAccount] IS NULL) OR ([BankAccount] = @Origin" +
                "al_BankAccount)) AND ((@IsNull_IdentityCard = 1 AND [IdentityCard] IS NULL) OR (" +
                "[IdentityCard] = @Original_IdentityCard)) AND ((@IsNull_Position = 1 AND [Positi" +
                "on] IS NULL) OR ([Position] = @Original_Position)) AND ((@IsNull_FatherUserID = " +
                "1 AND [FatherUserID] IS NULL) OR ([FatherUserID] = @Original_FatherUserID)));\r\nS" +
                "ELECT UserID, UserName, Password, SecureQuestion, SecureAnswer, Role, Photo, Reg" +
                "Date, RealName, Sex, Age, Tel, Email, Address, Comment, BankAccount, IdentityCar" +
                "d, Position, FatherUserID FROM [User] WHERE (UserID = @UserID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SecureQuestion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureQuestion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SecureAnswer", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureAnswer", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Role", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Role", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Photo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Photo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RegDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RegDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RealName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RealName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sex", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Sex", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Age", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Tel", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Tel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Comment", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankAccount", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityCard", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IdentityCard", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Position", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Position", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FatherUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FatherUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Password", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SecureQuestion", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureQuestion", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SecureQuestion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureQuestion", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_SecureAnswer", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureAnswer", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SecureAnswer", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "SecureAnswer", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Role", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Role", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Photo", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Photo", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Photo", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Photo", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RegDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RegDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RealName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "RealName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Sex", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Sex", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Sex", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "Sex", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Age", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Age", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Tel", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Tel", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Tel", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Tel", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Address", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Address", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_BankAccount", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_BankAccount", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_IdentityCard", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "IdentityCard", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IdentityCard", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "IdentityCard", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Position", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Position", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Position", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Position", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_FatherUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FatherUserID", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FatherUserID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FatherUserID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::BLL.Properties.Settings.Default.VCFConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserID, UserName, Password, SecureQuestion, SecureAnswer, Role, Photo, Reg" +
                "Date, RealName, Sex, Age, Tel, Email, Address, Comment, BankAccount, IdentityCar" +
                "d, Position, FatherUserID FROM dbo.[User]";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"INSERT INTO [dbo].[User] ([UserName], [Password], [SecureQuestion], [SecureAnswer], [Role], [Photo],  [RealName], [Sex], [Age], [Tel], [Email], [Address], [Comment],[BankAccount],
 [IdentityCard])

 VALUES (@UserName, pwdencrypt(@Password), @SecureQuestion, @SecureAnswer, 3, @Photo,  @RealName, @Sex, @Age, @Tel, @Email, @Address, @Comment,@UserName,@UserName);
";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "IdentityCard", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SecureQuestion", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "SecureQuestion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SecureAnswer", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "SecureAnswer", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Photo", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "Photo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RealName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "RealName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sex", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "Sex", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Age", System.Data.SqlDbType.TinyInt, 1, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Tel", System.Data.SqlDbType.VarChar, 15, System.Data.ParameterDirection.Input, 0, 0, "Tel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Comment", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "Comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"INSERT INTO [dbo].[User] ([UserName], [Password], [SecureQuestion], [SecureAnswer], [Role], [Photo], [RealName], [Sex], [Age], [Tel], [Email], [Address], [Comment], [BankAccount], [IdentityCard], [Position], [FatherUserID]) VALUES (@UserName, pwdencrypt(@Password), @SecureQuestion, @SecureAnswer, 1, @Photo,  @RealName, @Sex, @Age, @Tel, @Email, @Address, @Comment, @BankAccount, @IdentityCard, @Position, @FatherUserID);
";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password", System.Data.SqlDbType.VarChar, 1024, System.Data.ParameterDirection.Input, 0, 0, "", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SecureQuestion", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "SecureQuestion", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SecureAnswer", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "SecureAnswer", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Photo", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "Photo", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RealName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "RealName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sex", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "Sex", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Age", System.Data.SqlDbType.TinyInt, 1, System.Data.ParameterDirection.Input, 0, 0, "Age", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Tel", System.Data.SqlDbType.VarChar, 15, System.Data.ParameterDirection.Input, 0, 0, "Tel", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Email", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Address", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "Address", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Comment", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "Comment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BankAccount", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "BankAccount", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@IdentityCard", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "IdentityCard", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Position", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "Position", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FatherUserID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "FatherUserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "dbo.GetTopNSystemUserWhereRealNameStartWith";
            this._commandCollection[3].CommandType = System.Data.CommandType.StoredProcedure;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RealName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Count", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, null, System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT UserID, UserName, Password, SecureQuestion, SecureAnswer, Role, Photo, \r\n " +
                "     RegDate, RealName, Sex, Age, Tel, Email, Address, Comment, BankAccount, \r\n " +
                "     IdentityCard, Position, FatherUserID\r\nFROM [User]\r\nWHERE (UserID = @UserID)" +
                "";
            this._commandCollection[4].CommandType = System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT * FROM dbo.[User]\r\nwhere\r\n(UserName=@UserName);";
            this._commandCollection[5].CommandType = System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 50, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(VCFDataSet.UserDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual VCFDataSet.UserDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            VCFDataSet.UserDataTable dataTable = new VCFDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual VCFDataSet.UserDataTable GetTopNSystemUserWhereRealNameStartWith(string RealName, System.Nullable<int> Count) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((RealName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(RealName));
            }
            if ((Count.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((int)(Count.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = System.DBNull.Value;
            }
            VCFDataSet.UserDataTable dataTable = new VCFDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual VCFDataSet.UserDataTable GetUserByUserID(int UserID) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(UserID));
            VCFDataSet.UserDataTable dataTable = new VCFDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual VCFDataSet.UserDataTable GetUserByUserName(string UserName) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((UserName == null)) {
                throw new System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(UserName));
            }
            VCFDataSet.UserDataTable dataTable = new VCFDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet.UserDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet dataSet) {
            return this.Adapter.Update(dataSet, "User");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_UserID, 
                    string Original_UserName, 
                    string Original_Password, 
                    string Original_SecureQuestion, 
                    string Original_SecureAnswer, 
                    byte Original_Role, 
                    string Original_Photo, 
                    System.DateTime Original_RegDate, 
                    string Original_RealName, 
                    System.Nullable<bool> Original_Sex, 
                    System.Nullable<byte> Original_Age, 
                    string Original_Tel, 
                    string Original_Email, 
                    string Original_Address, 
                    string Original_BankAccount, 
                    string Original_IdentityCard, 
                    string Original_Position, 
                    System.Nullable<int> Original_FatherUserID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_UserID));
            if ((Original_UserName == null)) {
                throw new System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_UserName));
            }
            if ((Original_Password == null)) {
                throw new System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Password));
            }
            if ((Original_SecureQuestion == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_SecureQuestion));
            }
            if ((Original_SecureAnswer == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_SecureAnswer));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((byte)(Original_Role));
            if ((Original_Photo == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Photo));
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_RegDate));
            if ((Original_RealName == null)) {
                throw new System.ArgumentNullException("Original_RealName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_RealName));
            }
            if ((Original_Sex.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((bool)(Original_Sex.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = System.DBNull.Value;
            }
            if ((Original_Age.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((byte)(Original_Age.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = System.DBNull.Value;
            }
            if ((Original_Tel == null)) {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[17].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_Tel));
            }
            if ((Original_Email == null)) {
                throw new System.ArgumentNullException("Original_Email");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Email));
            }
            if ((Original_Address == null)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_Address));
            }
            if ((Original_BankAccount == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_BankAccount));
            }
            if ((Original_IdentityCard == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_IdentityCard));
            }
            if ((Original_Position == null)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((string)(Original_Position));
            }
            if ((Original_FatherUserID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((int)(Original_FatherUserID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string UserName, 
                    string Password, 
                    string SecureQuestion, 
                    string SecureAnswer, 
                    byte Role, 
                    string Photo, 
                    System.DateTime RegDate, 
                    string RealName, 
                    System.Nullable<bool> Sex, 
                    System.Nullable<byte> Age, 
                    string Tel, 
                    string Email, 
                    string Address, 
                    string Comment, 
                    string BankAccount, 
                    string IdentityCard, 
                    string Position, 
                    System.Nullable<int> FatherUserID) {
            if ((UserName == null)) {
                throw new System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Password));
            }
            if ((SecureQuestion == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SecureQuestion));
            }
            if ((SecureAnswer == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SecureAnswer));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((byte)(Role));
            if ((Photo == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Photo));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(RegDate));
            if ((RealName == null)) {
                throw new System.ArgumentNullException("RealName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(RealName));
            }
            if ((Sex.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((bool)(Sex.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Age.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((byte)(Age.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Tel == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Tel));
            }
            if ((Email == null)) {
                throw new System.ArgumentNullException("Email");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Email));
            }
            if ((Address == null)) {
                this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(Address));
            }
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(Comment));
            }
            if ((BankAccount == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(BankAccount));
            }
            if ((IdentityCard == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(IdentityCard));
            }
            if ((Position == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(Position));
            }
            if ((FatherUserID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(FatherUserID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string UserName, 
                    string Password, 
                    string SecureQuestion, 
                    string SecureAnswer, 
                    byte Role, 
                    string Photo, 
                    System.DateTime RegDate, 
                    string RealName, 
                    System.Nullable<bool> Sex, 
                    System.Nullable<byte> Age, 
                    string Tel, 
                    string Email, 
                    string Address, 
                    string Comment, 
                    string BankAccount, 
                    string IdentityCard, 
                    string Position, 
                    System.Nullable<int> FatherUserID, 
                    int Original_UserID, 
                    string Original_UserName, 
                    string Original_Password, 
                    string Original_SecureQuestion, 
                    string Original_SecureAnswer, 
                    byte Original_Role, 
                    string Original_Photo, 
                    System.DateTime Original_RegDate, 
                    string Original_RealName, 
                    System.Nullable<bool> Original_Sex, 
                    System.Nullable<byte> Original_Age, 
                    string Original_Tel, 
                    string Original_Email, 
                    string Original_Address, 
                    string Original_BankAccount, 
                    string Original_IdentityCard, 
                    string Original_Position, 
                    System.Nullable<int> Original_FatherUserID, 
                    int UserID) {
            if ((UserName == null)) {
                throw new System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Password));
            }
            if ((SecureQuestion == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SecureQuestion));
            }
            if ((SecureAnswer == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(SecureAnswer));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((byte)(Role));
            if ((Photo == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Photo));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(RegDate));
            if ((RealName == null)) {
                throw new System.ArgumentNullException("RealName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(RealName));
            }
            if ((Sex.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((bool)(Sex.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            if ((Age.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((byte)(Age.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
            }
            if ((Tel == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Tel));
            }
            if ((Email == null)) {
                throw new System.ArgumentNullException("Email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Email));
            }
            if ((Address == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Address));
            }
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Comment));
            }
            if ((BankAccount == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(BankAccount));
            }
            if ((IdentityCard == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(IdentityCard));
            }
            if ((Position == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Position));
            }
            if ((FatherUserID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(FatherUserID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_UserID));
            if ((Original_UserName == null)) {
                throw new System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_UserName));
            }
            if ((Original_Password == null)) {
                throw new System.ArgumentNullException("Original_Password");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_Password));
            }
            if ((Original_SecureQuestion == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_SecureQuestion));
            }
            if ((Original_SecureAnswer == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_SecureAnswer));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((byte)(Original_Role));
            if ((Original_Photo == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_Photo));
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(Original_RegDate));
            if ((Original_RealName == null)) {
                throw new System.ArgumentNullException("Original_RealName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_RealName));
            }
            if ((Original_Sex.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((bool)(Original_Sex.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = System.DBNull.Value;
            }
            if ((Original_Age.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((byte)(Original_Age.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = System.DBNull.Value;
            }
            if ((Original_Tel == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_Tel));
            }
            if ((Original_Email == null)) {
                throw new System.ArgumentNullException("Original_Email");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_Email));
            }
            if ((Original_Address == null)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((string)(Original_Address));
            }
            if ((Original_BankAccount == null)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((string)(Original_BankAccount));
            }
            if ((Original_IdentityCard == null)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((string)(Original_IdentityCard));
            }
            if ((Original_Position == null)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((string)(Original_Position));
            }
            if ((Original_FatherUserID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((int)(Original_FatherUserID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[47].Value = ((int)(UserID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddDonor(string UserName, string Password, string SecureQuestion, string SecureAnswer, string Photo, string RealName, System.Nullable<bool> Sex, System.Nullable<int> Age, string Tel, string Email, string Address, string Comment) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((UserName == null)) {
                throw new System.ArgumentNullException("UserName");
            }
            else {
                command.Parameters[0].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                command.Parameters[1].Value = ((string)(Password));
            }
            if ((SecureQuestion == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(SecureQuestion));
            }
            if ((SecureAnswer == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(SecureAnswer));
            }
            if ((Photo == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(Photo));
            }
            if ((RealName == null)) {
                throw new System.ArgumentNullException("RealName");
            }
            else {
                command.Parameters[5].Value = ((string)(RealName));
            }
            if ((Sex.HasValue == true)) {
                command.Parameters[6].Value = ((bool)(Sex.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Age.HasValue == true)) {
                command.Parameters[7].Value = ((int)(Age.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Tel == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(Tel));
            }
            if ((Email == null)) {
                throw new System.ArgumentNullException("Email");
            }
            else {
                command.Parameters[9].Value = ((string)(Email));
            }
            if ((Address == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(Address));
            }
            if ((Comment == null)) {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((string)(Comment));
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddManager(
                    string UserName, 
                    string Password, 
                    string SecureQuestion, 
                    string SecureAnswer, 
                    string Photo, 
                    string RealName, 
                    System.Nullable<bool> Sex, 
                    System.Nullable<int> Age, 
                    string Tel, 
                    string Email, 
                    string Address, 
                    string Comment, 
                    string BankAccount, 
                    string IdentityCard, 
                    string Position, 
                    System.Nullable<int> FatherUserID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((UserName == null)) {
                throw new System.ArgumentNullException("UserName");
            }
            else {
                command.Parameters[0].Value = ((string)(UserName));
            }
            if ((Password == null)) {
                throw new System.ArgumentNullException("Password");
            }
            else {
                command.Parameters[1].Value = ((string)(Password));
            }
            if ((SecureQuestion == null)) {
                command.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(SecureQuestion));
            }
            if ((SecureAnswer == null)) {
                command.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(SecureAnswer));
            }
            if ((Photo == null)) {
                command.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(Photo));
            }
            if ((RealName == null)) {
                throw new System.ArgumentNullException("RealName");
            }
            else {
                command.Parameters[5].Value = ((string)(RealName));
            }
            if ((Sex.HasValue == true)) {
                command.Parameters[6].Value = ((bool)(Sex.Value));
            }
            else {
                command.Parameters[6].Value = System.DBNull.Value;
            }
            if ((Age.HasValue == true)) {
                command.Parameters[7].Value = ((int)(Age.Value));
            }
            else {
                command.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Tel == null)) {
                command.Parameters[8].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(Tel));
            }
            if ((Email == null)) {
                throw new System.ArgumentNullException("Email");
            }
            else {
                command.Parameters[9].Value = ((string)(Email));
            }
            if ((Address == null)) {
                command.Parameters[10].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(Address));
            }
            if ((Comment == null)) {
                command.Parameters[11].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[11].Value = ((string)(Comment));
            }
            if ((BankAccount == null)) {
                command.Parameters[12].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[12].Value = ((string)(BankAccount));
            }
            if ((IdentityCard == null)) {
                command.Parameters[13].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[13].Value = ((string)(IdentityCard));
            }
            if ((Position == null)) {
                command.Parameters[14].Value = System.DBNull.Value;
            }
            else {
                command.Parameters[14].Value = ((string)(Position));
            }
            if ((FatherUserID.HasValue == true)) {
                command.Parameters[15].Value = ((int)(FatherUserID.Value));
            }
            else {
                command.Parameters[15].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ProjectTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Project";
            tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Discription", "Discription");
            tableMapping.ColumnMappings.Add("ManagerID", "ManagerID");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Project] WHERE (([ProjectID] = @Original_ProjectID) AND ([Name" +
                "] = @Original_Name) AND ([ManagerID] = @Original_ManagerID) AND ([CreateDate] = " +
                "@Original_CreateDate) AND ([IsActive] = @Original_IsActive))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ManagerID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ManagerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CreateDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CreateDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsActive", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Project] ([Name], [Discription], [ManagerID], [CreateDate], [IsActive]) VALUES (@Name, @Discription, @ManagerID, @CreateDate, @IsActive);
SELECT ProjectID, Name, Discription, ManagerID, CreateDate, IsActive FROM Project WHERE (ProjectID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Discription", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Discription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ManagerID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ManagerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreateDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CreateDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsActive", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Project] SET [Name] = @Name, [Discription] = @Discription, [ManagerID] = @ManagerID, [CreateDate] = @CreateDate, [IsActive] = @IsActive WHERE (([ProjectID] = @Original_ProjectID) AND ([Name] = @Original_Name) AND ([ManagerID] = @Original_ManagerID) AND ([CreateDate] = @Original_CreateDate) AND ([IsActive] = @Original_IsActive));
SELECT ProjectID, Name, Discription, ManagerID, CreateDate, IsActive FROM Project WHERE (ProjectID = @ProjectID)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Discription", System.Data.SqlDbType.Text, 0, System.Data.ParameterDirection.Input, 0, 0, "Discription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ManagerID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ManagerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreateDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CreateDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsActive", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProjectID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ManagerID", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ManagerID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CreateDate", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CreateDate", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsActive", System.Data.SqlDbType.Bit, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ProjectID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::BLL.Properties.Settings.Default.VCFConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ProjectID, Name, Discription, ManagerID, CreateDate, IsActive FROM dbo.Pro" +
                "ject";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "INSERT INTO [dbo].[Project] ([Name], [Discription], [ManagerID]) VALUES (@Name, @" +
                "Discription, @ManagerID );\r\n";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Discription", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "Discription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ManagerID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ManagerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "DELETE FROM [dbo].[Project] WHERE (([ProjectID] = @Original_ProjectID))";
            this._commandCollection[2].CommandType = System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProjectID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "UPDATE Project\r\nSET Name = @Name, Discription = @Discription, ManagerID = @Manage" +
                "rID, \r\n      IsActive = @IsActive,CreateDate=@CreateDate\r\nWHERE (ProjectID = @Or" +
                "iginal_ProjectID); \r\n";
            this._commandCollection[3].CommandType = System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 100, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Discription", System.Data.SqlDbType.Text, 2147483647, System.Data.ParameterDirection.Input, 0, 0, "Discription", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ManagerID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ManagerID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsActive", System.Data.SqlDbType.Bit, 1, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreateDate", System.Data.SqlDbType.DateTime, 8, System.Data.ParameterDirection.Input, 0, 0, "CreateDate", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ProjectID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "ProjectID", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(VCFDataSet.ProjectDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual VCFDataSet.ProjectDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            VCFDataSet.ProjectDataTable dataTable = new VCFDataSet.ProjectDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet.ProjectDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(VCFDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Project");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ProjectID, string Original_Name, int Original_ManagerID, System.DateTime Original_CreateDate, bool Original_IsActive) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ProjectID));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ManagerID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_CreateDate));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((bool)(Original_IsActive));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string Discription, int ManagerID, System.DateTime CreateDate, bool IsActive) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Discription == null)) {
                throw new System.ArgumentNullException("Discription");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Discription));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ManagerID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(CreateDate));
            this.Adapter.InsertCommand.Parameters[4].Value = ((bool)(IsActive));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string Discription, int ManagerID, System.DateTime CreateDate, bool IsActive, int Original_ProjectID, string Original_Name, int Original_ManagerID, System.DateTime Original_CreateDate, bool Original_IsActive, int ProjectID) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Discription == null)) {
                throw new System.ArgumentNullException("Discription");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Discription));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ManagerID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(CreateDate));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((bool)(IsActive));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ProjectID));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_ManagerID));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(Original_CreateDate));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(Original_IsActive));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(ProjectID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddProject(string Name, string Discription, int ManagerID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                command.Parameters[0].Value = ((string)(Name));
            }
            if ((Discription == null)) {
                throw new System.ArgumentNullException("Discription");
            }
            else {
                command.Parameters[1].Value = ((string)(Discription));
            }
            command.Parameters[2].Value = ((int)(ManagerID));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteByProjectID(int Original_ProjectID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((int)(Original_ProjectID));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateByProjectID(string Name, string Discription, int ManagerID, bool IsActive, System.DateTime CreateDate, int Original_ProjectID) {
            System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                command.Parameters[0].Value = ((string)(Name));
            }
            if ((Discription == null)) {
                throw new System.ArgumentNullException("Discription");
            }
            else {
                command.Parameters[1].Value = ((string)(Discription));
            }
            command.Parameters[2].Value = ((int)(ManagerID));
            command.Parameters[3].Value = ((bool)(IsActive));
            command.Parameters[4].Value = ((System.DateTime)(CreateDate));
            command.Parameters[5].Value = ((int)(Original_ProjectID));
            System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class V_FormatedUserTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public V_FormatedUserTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "V_FormatedUser";
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("Photo", "Photo");
            tableMapping.ColumnMappings.Add("RegDate", "RegDate");
            tableMapping.ColumnMappings.Add("RealName", "RealName");
            tableMapping.ColumnMappings.Add("Age", "Age");
            tableMapping.ColumnMappings.Add("Tel", "Tel");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("BankAccount", "BankAccount");
            tableMapping.ColumnMappings.Add("IdentityCard", "IdentityCard");
            tableMapping.ColumnMappings.Add("Position", "Position");
            tableMapping.ColumnMappings.Add("FatherUserID", "FatherUserID");
            tableMapping.ColumnMappings.Add("Sex", "Sex");
            tableMapping.ColumnMappings.Add("Role", "Role");
            tableMapping.ColumnMappings.Add("FatherUserName", "FatherUserName");
            tableMapping.ColumnMappings.Add("FatherRealName", "FatherRealName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::BLL.Properties.Settings.Default.VCFConnectionString1;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserID, UserName, Photo, RegDate, RealName, Age, Tel, Email, Address, Comm" +
                "ent, BankAccount, IdentityCard, Position, FatherUserID, Sex, Role, FatherUserNam" +
                "e, FatherRealName FROM dbo.V_FormatedUser";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT UserID, UserName, Photo, RegDate, RealName, Age, Tel, Email, Address, Comm" +
                "ent, BankAccount, IdentityCard, Position, FatherUserID, Sex, Role, FatherUserNam" +
                "e, FatherRealName FROM dbo.V_FormatedUser where UserID=@UserID";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserID", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "UserID", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(VCFDataSet.V_FormatedUserDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual VCFDataSet.V_FormatedUserDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            VCFDataSet.V_FormatedUserDataTable dataTable = new VCFDataSet.V_FormatedUserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual VCFDataSet.V_FormatedUserDataTable GetUserByUserID(int UserID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(UserID));
            VCFDataSet.V_FormatedUserDataTable dataTable = new VCFDataSet.V_FormatedUserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591